[library IETL
    [authors [Jäger, Robin] ]
    [copyright 2011  Matthias Troyer, Bela Bauer, Robin Jäger]
    [purpose
        Iterative Eigensolver Template Library
    ]
    [id ietl]
    [dirname ietl]
    [license
        Distributed under the Boost Software License, Version 1.0.
        (See accompanying file LICENSE_1_0.txt or copy at
        <ulink url="http://www.boost.org/LICENSE_1_0.txt">
            http://www.boost.org/LICENSE_1_0.txt
        </ulink>)
    ]
]
[section:ietl IETL]
[section:concept IETL Concepts and Interfaces]
Here we define the requirements on the types necesary to use the IETL algorithms:
[section:vectorspace The vector space concept]
Linear eigensolvers mathematically rely on the concept of a vectorspace, which also defines the necessary functionality for the IETL. Going beyond the [@http://www.osl.iu.edu/research/itl/ ITL] we expand on the concept of a vectorspace and find the necessity to require a vector space class to be passed to the algorithms. Let

* `VS` be a class modeling the concept of vectorspace
* `vs` be an object of type `VS`

then the following types have to be defined:
[table
[[Type] [Documentation]]
[[`ietl::vectorspace_traits<VS>::vector_type`] [the type of vectors in the vector space]]
[[`ietl::vectorspace_traits<VS>::scalar_type`] [the type of scalars in the vector space]]
[[`ietl::vectorspace_traits<VS>::magnitude_type`] [a scalar type appropriate for storing norms, usually the same as `scalar_type` for real types, or the corresponding real type for complex types.]]
[[`ietl::vectorspace_traits<VS>::size_type`] [an integral type large enough to store the dimension of the vector space]]
]
and the following expression have to be defined for the vector space object:
[table
[[Expression] [return type] [Documentation]]
[[`new_vector(vs)`] [`ietl::vectorspace_traits<VS>::vector_type`] [creates a new vector of the vector space]]
[[`vec_dimension(vs)`] [`ietl::vectorspace_traits<VS>::size_type`] [returns the dimension of the vector space]]
[[`project(x,vs)`] [`void`] [projects the vector `x` into the vector space]]
]
The `new_vector` function is necessary since we do not know the types and number of arguments needed for the constructor of a vector. The [@http://www.osl.iu.edu/research/itl/ ITL] assumes there is a constructor taking only the vector size as argument but this is insufficient in cases where more than the size is needed in the constructor, such as:

*  multi-dimensional arrays
*  distributed arrays taking additional information, requiring as the data layout in the constructor 

The `project` function is required if the actual vector space is a subspace of the representation space. E.g. if special boundary conditions are imposed on an array.
For the most common case, where the vector models the concept of an STL Container we provide two model implementations: [headerref alps/src/ietl/vectorspace.h vectorspace] and [classref ietl::wrapper_vectorspace wrapper_vectorspace].

[endsect] [/vectorspace]

[section:matreq Requirements on the matrix]
Iterative algorithms require the matrix (linear operator) of which eigenvalues and eigenvectors are to be calculated only in the form of matrix-vector products. Hence only a single function is required. Let

*  `VS` be a class modeling the concept of vectorspace
*  `x`, `y` be an vectors in the vector space ( of type `ietl::vectorspace_traits<VS>::vector_type` )
*  a be the matrix 

then the following expression needs to be defined
[table
[[Expression] [return type] [Documentation]]
[[`ietl::mult(a,x,y)`] [`void`] [calculates the matrix-vector product y=a*x]]
]
For all uBlas matrix types, the `ietl::mult` function with `boost::numeric:ublas::vector` as vector type is implemented in the header [headerref alps/src/ietl/interface/ublas.h ietl/interface/ublas.h] .
[endsect] [/matreq]
[section:vecreq Requirements on the vector]
The vector type needs to fulfill the following requirements.

*  `VS` be a class modeling the concept of vectorspace
*  `V` be the type `ietl::vectorspace_traits<VS>::vector_type`
*  `S` be the type `ietl::vectorspace_traits<VS>::scalar_type`
*  `M` be the type `ietl::vectorspace_traits<VS>::magnitude_type`
*  `x`, `y`  be a vectors in the vector space, of type `V`
*  `t` be a scalar, of type `S`
*  `g` be a model of a generator producing values of type `S`

Then the following expressions need to be defined for all IETL algorithms.
[table
[[Expression] [return type] [Documentation]]
[[`ietl::generate(x,g)`] [`void`] [fills the vector `x` with numbers from the generator g. For a standard container this can be implemented as `std::generate(x.begin(),x.end(),g);`]]
[[`std::swap(x,y)`] [`void`] [swaps the two vectors `x` and `y`]]
[[`ietl::dot(x,y)`] [`S`] [calculates the scalar product of the two vectors `x` and `y`.]]
[[`ietl::two_norm(x)`] [`M`] [calculates the 2-norm of the vector `x`. This is equivalent to `sqrt(ietl::dot(x,x))`.]]
[[`ietl::copy(x,y)`] [`void`] [a deep copy `y = x`. Modifications of `x` after the call are not allowed to modify `y`.]]
[[`y = x`] [`const V&`] [a (possibly shallow) copy]]
[[`x *= t`] [`const V&`] []]
[[`x /= t`] [`const V&`] []]
[[`x += y`] [`const V&`] []]
[[`x += t*y`] [`const V&`] []]
[[`x -= t*y`] [`const V&`] []]
[[`x = t*y`] [`const V&`] []]
] [/table]
The necessary functions are implemented in the header [headerref alps/src/ietl/interface/ublas.h ietl/interface/ublas.h] for ublas vectors, and in [headerref alps/src/ietl/interface/blitz.h ietl/interface/blitz.h] for Blitz++ arrays.
[endsect] [/vecreq]

[section:iterreq Requirements on the standard iteration control object]
Iterative algorithms run until the desired accuracy is reached. To control the termination of the iteration, the IETL algorithms take an iteration control object. Let `it` be the iteration control object, `lambda` the best estimate for the eigenvalue and residual be the residual ||A v - lambda v|| then the following expressions need to be defined:
[table
[[Expression] [return type] [Documentation]]
[[`++it`] [`void`] [is called at the start of a new iteration]]
[[`it.finished(residual, lambda)`] [`bool`] [returns `true` if the desired accuracy is reached and the iteration can be terminated, returns `false` otherwise. `residual` and `lambda` are of the `magnitude_type` and are the residual and and latest estimate of the eigenvalue respectively]]
]
A model implementation `basic_iteration` is provided in [headerref alps/src/ietl/iteration.h ietl/iteration.h].

Some algorithms require more complex iteration control objects. They will be discussed with the algorithms.

[endsect] [/iterreq]

[section:lanczosreq Requirements on the Lanczos iteration control object]
Iterative algorithms run until the desired accuracy is reached. To control the termination of the iteration, the IETL algorithms take an iteration control object. Let `it` be the iteration control object, `lambda` the best estimate for the eigenvalue and residual be the residual ||A v - lambda v|| then the following expressions need to be defined:
[table
[[Expression] [return type] [Documentation]]
[[`++it`] [`void`] [is called at the start of a new iteration]]
[[`it.finished(tmatrix)`] [`bool`] [returns `true` if the desired accuracy is reached and the iteration can be terminated, returns `false` otherwise. The /T/-matrix of the Lanczos iterations is passed as argument.]]
]
Model implementation are provided [headerref alps/src/ietl/iteration.h ietl/iteration.h]. 
[endsect] [/lanczosreq]

[endsect] [/concept]

[section:jd Jacobi-Davidson]

Generic implementation of the Jacobi-Davidson algorithm for hermitian hamiltonians.

[section:intro Usage]
This eigensolver can be used with any linear algebra library fullfilling the [link ietl.vecreq requirements] of the IETL.
[note Note that a function ietl::mult(A, x, b), calculating the matrix-vector product b = A x, must be defined and has to be declared before including the header [headerref alps/src/ietl/jd.h ietl/jd.h].]
If you are using the boost::ublas library, [headerref alps/src/ietl/interface/ublas.h ietl/interface/ublas.h] holds the proper function interface.

The *constructor* has the following syntax:
``
 jd(const MATRIX& A, VS& vspace, size_t verbose = 0)
``

*  `A` is a matrix fullfilling the [link ietl.matreq requirements].
*  `VS` is a [classref ietl::vectorspace vectorspace].
*  `verbose` is *optional*,
   * `0`, for errors only
   * `1`, print message when converged
   * `2`, print current iteration and residual

The class [classref ietl::jd] basically provides two functions:

* [memberref ietl::jd::eigensystem eigensystem()] to calculate exterior eigenpairs.
* [memberref ietl::jd::eigensystem_harmonic eigensystem_harmonic()] to calculate interior eigenpairs.

These are implementations of the algorithm templates [@http://web.eecs.utk.edu/~dongarra/etemplates/node144.html#alg:jdqr jdqr] and [@http://web.eecs.utk.edu/~dongarra/etemplates/node145.html#alg:jdqrhar jdqrhar]. The first can be used with a constant preconditioner.

[table 
[[Parameter] [Description] [Example] [Info]]
[[`IT& iter`] [[link ietl.iter Iterator] object] [`ietl::jd_iteration(N)`] []]
[[`GEN& gen`] [Random number generator for generating a starting vector] [`boost::lagged_fibonacci607()`] []]
[[`size_t k`] [Number of eigenpairs to be calculated] [`3`] []]
[[`PREC& K`] [Constant Preconditioner] [[link ietl.example2 example2]] [*optional* for `eigensystem()`]]
[[`SOLV& solver`] [[link ietl.krylov Krylov solver]] [`ietl::gmres_wrapper()`] []]
[[`bool search_highest = false`] [On default search for the lowest eigenpairs] [true]  [*only* for eigensystem()]]
[[`real_t tau`] [Target value near which eigenpairs are searched] [`0.`] [*only* for eigensystem_harmonic()]]
] 

[endsect] [/intro]
[section:iter Iterator]
The iterator [classref ietl::jd_iteration jd_iteration] contains all required parameters.

[table 
[[Parameter] [Description] [Default] [reasonable constraints]]
[[`size_t max_iter`] [max. number of iterations] [] [ ~N ]]
[[`size_t m_min`] [size of the vectorset after a restart] [10] [ >= 3 ]]
[[`size_t m_max`] [max. size of the vectorset] [20] [ > m_min ]]
[[`T reltol`] [relative tolerance] [`sqrt(std::numeric_limits<double>::epsilon())`] [ >= default]]
[[`T abstol`] [absolute tolerance] [`sqrt(std::numeric_limits<double>::epsilon())`] [ >= default]]
]

[endsect][/iter]
[section:krylov Krylov Solver]
For the Jacobi-Davidson algorithm one needs a Krylov solver to approximately solve the correction equation (I - QQ\*)(A - \theta I)(I - QQ\*) t = -r. The krylov-solver has to be wrapped in a function object. Already provided are [macroref MAKE_WRAPPER GMRES] and [classref ietl::bicgstab_wrapper BiCGSTAB(L)].

The function object must have the following syntax:
``
 class krylov_wrapper {
    public:
        template <class VECTOR, class MATRIX, class REAL>
        //solve x from A x = b
        VECTOR operator() ( const MATRIX & A, // deflated matrix
                            const VECTOR & b,
                            const VECTOR & x0, // starting vector
                            REAL absolute_tolerance )
 };
``
The class [classref ietl::detail::deflated_matrix detail::deflated_matrix] defines a deflated matrix-vector product.

[endsect] [/ krylov]

[section:example1 Example 1 A simple Hamiltonian]
In this example a hamiltonian of a simple one particle system with periodic boundary conditions is shown, it does not store a matrix. The lowest eigenvalue is `-2` and all interior eigenvalues are two-fold degenerate.
Here is part of the code. To see the full sourcecode, look at [@@PROJECT_SOURCE_DIR@/example/ietl/jacobidavidson1.cpp jacobidavidson1.cpp].
[c++]
[import @PROJECT_SOURCE_DIR@/example/ietl/jacobidavidson1.cpp]
[example1]

[endsect] [/ example1 ]

[section:example2 Example 2 Jacobi preconditioning for a random matrix]
Here we calculate the eigenvalues of a diagonal dominant random matrix. First we do this without preconditioning, then with preconditioning comparing the iterations and time used until convergence is reached.
Again here is only the code skeleton of the example [@@PROJECT_SOURCE_DIR@/example/ietl/jacobidavidson2.cpp jacobidavidson2.cpp].
The preconditioner has to define a function ietl::mult(K, x, r) which approximates r ~= K x.

[import @PROJECT_SOURCE_DIR@/example/ietl/jacobidavidson2.cpp]
The preconditioner:

[preconditioner]

The function call:

[funccall]

[endsect] [/ example2]

[endsect] [/ jd ]
[endsect] [/ ietl ]

[xinclude ietl.autodoc]
